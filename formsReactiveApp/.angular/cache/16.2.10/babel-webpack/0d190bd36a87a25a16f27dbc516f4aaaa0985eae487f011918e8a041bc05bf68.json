{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidatorService {\n  constructor() {\n    this.firstNameAndLastnamePattern = '([a-zA-Z]+) ([a-zA-Z]+)';\n    this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n    this.canBeStrider = control => {\n      const value = control.value.trim().toLowerCase();\n      if (value === 'strider') {\n        return {\n          noStrider: true\n        };\n      }\n      return null;\n    };\n  }\n  isValidField(form, field) {\n    return Boolean(form.controls[field].errors) && form.controls[field].touched;\n  }\n  isfieldOneEqualFieldTwo(field1, field2) {\n    return formGroup => {\n      const fieldValue1 = formGroup.get(field1);\n      const fieldValue2 = formGroup.get(field2);\n      if (fieldValue1 != fieldValue2) {\n        return {\n          notEqual: true\n        };\n      }\n    };\n  }\n  static #_ = this.ɵfac = function ValidatorService_Factory(t) {\n    return new (t || ValidatorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidatorService,\n    factory: ValidatorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ValidatorService","constructor","firstNameAndLastnamePattern","emailPattern","canBeStrider","control","value","trim","toLowerCase","noStrider","isValidField","form","field","Boolean","controls","errors","touched","isfieldOneEqualFieldTwo","field1","field2","formGroup","fieldValue1","get","fieldValue2","notEqual","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\formsReactiveApp\\src\\app\\shared\\service\\validator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormControl, ValidationErrors, FormGroup } from '@angular/forms';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ValidatorService {\r\n\r\n  public firstNameAndLastnamePattern: string = '([a-zA-Z]+) ([a-zA-Z]+)';\r\n  public emailPattern: string = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\r\n\r\n  public canBeStrider = (control: FormControl): ValidationErrors | null => {\r\n\r\n    const value: string = control.value.trim().toLowerCase();\r\n    if (value === 'strider') {\r\n      return {\r\n        noStrider: true\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isValidField(form: FormGroup, field: string): boolean {\r\n    return Boolean(form.controls[field].errors)\r\n      && form.controls[field].touched;\r\n  }\r\n\r\n  isfieldOneEqualFieldTwo(field1: string, field2: string) {\r\n    return (formGroup: FormGroup): ValidationErrors | null => {\r\n\r\n      const fieldValue1 = formGroup.get(field1);\r\n      const fieldValue2 = formGroup.get(field2);\r\n\r\n      if (fieldValue1 != fieldValue2) {\r\n        return { notEqual: true }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":";AAIA,OAAM,MAAOA,gBAAgB;EAD7BC,YAAA;IAGS,KAAAC,2BAA2B,GAAW,yBAAyB;IAC/D,KAAAC,YAAY,GAAW,2CAA2C;IAElE,KAAAC,YAAY,GAAIC,OAAoB,IAA6B;MAEtE,MAAMC,KAAK,GAAWD,OAAO,CAACC,KAAK,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE;MACxD,IAAIF,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO;UACLG,SAAS,EAAE;SACZ;;MAEH,OAAO,IAAI;IACb,CAAC;;EAEDC,YAAYA,CAACC,IAAe,EAAEC,KAAa;IACzC,OAAOC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,IACtCJ,IAAI,CAACG,QAAQ,CAACF,KAAK,CAAC,CAACI,OAAO;EACnC;EAEAC,uBAAuBA,CAACC,MAAc,EAAEC,MAAc;IACpD,OAAQC,SAAoB,IAA6B;MAEvD,MAAMC,WAAW,GAAGD,SAAS,CAACE,GAAG,CAACJ,MAAM,CAAC;MACzC,MAAMK,WAAW,GAAGH,SAAS,CAACE,GAAG,CAACH,MAAM,CAAC;MAEzC,IAAIE,WAAW,IAAIE,WAAW,EAAE;QAC9B,OAAO;UAAEC,QAAQ,EAAE;QAAI,CAAE;;IAE7B,CAAC;EACH;EAAC,QAAAC,CAAA,G;qBA/BUzB,gBAAgB;EAAA;EAAA,QAAA0B,EAAA,G;WAAhB1B,gBAAgB;IAAA2B,OAAA,EAAhB3B,gBAAgB,CAAA4B,IAAA;IAAAC,UAAA,EADH;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}