{"ast":null,"code":"import { Region } from '../interfaces/country.interface';\nimport { map, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountriesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'https://restrountries.com/v3.1';\n    this._regions = [Region.Africa, Region.Americas, Region.Asia, Region.Europe, Region.Oceania];\n  }\n  get regions() {\n    return [...this._regions];\n  }\n  getCountriesByRegion(region) {\n    if (!region) return of([]);\n    const url = `${this.baseUrl}/region/${region}/?fields=cca3,name,borders`;\n    return this.httpClient.get(url).pipe(map(countries => countries.map(country => ({\n      name: country.name.common,\n      cca3: country.cca3,\n      borders: country.borders || []\n    }))), tap(response => console.log({\n      response\n    })));\n  }\n  static #_ = this.ɵfac = function CountriesService_Factory(t) {\n    return new (t || CountriesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CountriesService,\n    factory: CountriesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Region","map","of","tap","CountriesService","constructor","httpClient","baseUrl","_regions","Africa","Americas","Asia","Europe","Oceania","regions","getCountriesByRegion","region","url","get","pipe","countries","country","name","common","cca3","borders","response","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\selectores\\src\\app\\countries\\services\\countries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Country, Region, SmallCountry } from '../interfaces/country.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, of, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n  private baseUrl: string = 'https://restrountries.com/v3.1';\n\n  private _regions: Region[] = [\n    Region.Africa,\n    Region.Americas,\n    Region.Asia,\n    Region.Europe,\n    Region.Oceania,\n  ]\n\n  constructor(private httpClient: HttpClient) { }\n\n  get regions(): Region[] {\n    return [...this._regions];\n  }\n\n  getCountriesByRegion(region: Region): Observable<SmallCountry[]> {\n    if (!region) return of([]);\n\n    const url: string = `${this.baseUrl}/region/${region}/?fields=cca3,name,borders`;\n\n    return this.httpClient.get<Country[]>(url)\n      .pipe(\n        map(countries => countries.map(country => ({\n          name: country.name.common,\n          cca3: country.cca3,\n          borders: country.borders || []\n        }))),\n        tap(response => console.log({ response }))\n      )\n  }\n}\n"],"mappings":"AACA,SAAkBA,MAAM,QAAsB,iCAAiC;AAE/E,SAAqBC,GAAG,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAK/C,OAAM,MAAOC,gBAAgB;EAY3BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAVtB,KAAAC,OAAO,GAAW,gCAAgC;IAElD,KAAAC,QAAQ,GAAa,CAC3BR,MAAM,CAACS,MAAM,EACbT,MAAM,CAACU,QAAQ,EACfV,MAAM,CAACW,IAAI,EACXX,MAAM,CAACY,MAAM,EACbZ,MAAM,CAACa,OAAO,CACf;EAE6C;EAE9C,IAAIC,OAAOA,CAAA;IACT,OAAO,CAAC,GAAG,IAAI,CAACN,QAAQ,CAAC;EAC3B;EAEAO,oBAAoBA,CAACC,MAAc;IACjC,IAAI,CAACA,MAAM,EAAE,OAAOd,EAAE,CAAC,EAAE,CAAC;IAE1B,MAAMe,GAAG,GAAW,GAAG,IAAI,CAACV,OAAO,WAAWS,MAAM,4BAA4B;IAEhF,OAAO,IAAI,CAACV,UAAU,CAACY,GAAG,CAAYD,GAAG,CAAC,CACvCE,IAAI,CACHlB,GAAG,CAACmB,SAAS,IAAIA,SAAS,CAACnB,GAAG,CAACoB,OAAO,KAAK;MACzCC,IAAI,EAAED,OAAO,CAACC,IAAI,CAACC,MAAM;MACzBC,IAAI,EAAEH,OAAO,CAACG,IAAI;MAClBC,OAAO,EAAEJ,OAAO,CAACI,OAAO,IAAI;KAC7B,CAAC,CAAC,CAAC,EACJtB,GAAG,CAACuB,QAAQ,IAAIC,OAAO,CAACC,GAAG,CAAC;MAAEF;IAAQ,CAAE,CAAC,CAAC,CAC3C;EACL;EAAC,QAAAG,CAAA,G;qBAhCUzB,gBAAgB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB9B,gBAAgB;IAAA+B,OAAA,EAAhB/B,gBAAgB,CAAAgC,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}