{"ast":null,"code":"import { Region } from '../interfaces/country.interface';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountriesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'https://restrountries.com/v3.1';\n    this._regions = [Region.Africa, Region.Americas, Region.Asia, Region.Europe, Region.Oceania];\n  }\n  get regions() {\n    return [...this._regions];\n  }\n  getCountriesByRegion(region) {\n    if (!region) return of([]);\n    const url = `${this.baseUrl}/region/${region}/?fields=cca3,name,borders`;\n    return this.httpClient.get(url).pipe(tap(response => console.log({\n      ressponse\n    })));\n  }\n  static #_ = this.ɵfac = function CountriesService_Factory(t) {\n    return new (t || CountriesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CountriesService,\n    factory: CountriesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Region","of","CountriesService","constructor","httpClient","baseUrl","_regions","Africa","Americas","Asia","Europe","Oceania","regions","getCountriesByRegion","region","url","get","pipe","tap","response","console","log","ressponse","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\selectores\\src\\app\\countries\\services\\countries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Region, SmallCountry } from '../interfaces/country.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n  private baseUrl: string = 'https://restrountries.com/v3.1';\n\n  private _regions: Region[] = [\n    Region.Africa,\n    Region.Americas,\n    Region.Asia,\n    Region.Europe,\n    Region.Oceania,\n  ]\n\n  constructor(private httpClient: HttpClient) { }\n\n  get regions(): Region[] {\n    return [...this._regions];\n  }\n\n  getCountriesByRegion(region: Region): Observable<SmallCountry[]> {\n    if (!region) return of([]);\n\n    const url: string = `${this.baseUrl}/region/${region}/?fields=cca3,name,borders`;\n\n    return this.httpClient.get<SmallCountry[]>(url).pipe(\n      tap(response => console.log({ ressponse });\n      )\n    )\n  }\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAsB,iCAAiC;AAEtE,SAAqBC,EAAE,QAAQ,MAAM;;;AAKrC,OAAM,MAAOC,gBAAgB;EAY3BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAVtB,KAAAC,OAAO,GAAW,gCAAgC;IAElD,KAAAC,QAAQ,GAAa,CAC3BN,MAAM,CAACO,MAAM,EACbP,MAAM,CAACQ,QAAQ,EACfR,MAAM,CAACS,IAAI,EACXT,MAAM,CAACU,MAAM,EACbV,MAAM,CAACW,OAAO,CACf;EAE6C;EAE9C,IAAIC,OAAOA,CAAA;IACT,OAAO,CAAC,GAAG,IAAI,CAACN,QAAQ,CAAC;EAC3B;EAEAO,oBAAoBA,CAACC,MAAc;IACjC,IAAI,CAACA,MAAM,EAAE,OAAOb,EAAE,CAAC,EAAE,CAAC;IAE1B,MAAMc,GAAG,GAAW,GAAG,IAAI,CAACV,OAAO,WAAWS,MAAM,4BAA4B;IAEhF,OAAO,IAAI,CAACV,UAAU,CAACY,GAAG,CAAiBD,GAAG,CAAC,CAACE,IAAI,CAClDC,GAAG,CAACC,QAAQ,IAAIC,OAAO,CAACC,GAAG,CAAC;MAAEC;IAAS,CAAE,CAAC;EAG9C;EAAC,QAAAC,CAAA,G;qBA3BUrB,gBAAgB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB1B,gBAAgB;IAAA2B,OAAA,EAAhB3B,gBAAgB,CAAA4B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}