{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { tap, of, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n  }\n  get currentUser() {\n    if (!this.user) return undefined;\n    // No es recomendable retornar el this.user ya que fuera del servicio se puede acceder o modificar el usuario\n    // Es recomendable enviar una copia del objeto, ya sea con {...this.user} o con structuredClone, función nueva de la última versión de Angular\n    // structuredClone hace una deep clone (profunda clonación)\n    // return this.user;\n    return structuredClone(this.user);\n  }\n  login(email, password) {\n    // Paso 1 que se hará en un futuro con el backend implementado\n    // this.http.post('login', { email, password });\n    return this.http.get(`${this.baseUrl}/users/1`).pipe(tap(user => this.user = user), tap(user => localStorage.setItem('token', 'AS1wyxzvc897asdf9xv.oi8as897fgd89suds.fdgfds6h5gfd6')));\n  }\n  // El observable va a emitir un valor booleano\n  checkAuthentication() {\n    if (!localStorage.getItem('token')) return false;\n    const token = localStorage.getItem('token');\n    return this.http.get(`${this.baseUrl}/users/1`).pipe(tap(user => this.user = user), map(user => !!user));\n    return of(true);\n  }\n  logout() {\n    this.user = undefined;\n    localStorage.clear();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","tap","of","map","AuthService","constructor","http","baseUrl","currentUser","user","undefined","structuredClone","login","email","password","get","pipe","localStorage","setItem","checkAuthentication","getItem","token","logout","clear","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\heroesApp\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../interfaces/user.interface';\nimport { Observable, tap, of, map } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private baseUrl: string = environment.baseUrl;\n  private user?: User;\n\n  constructor(private http: HttpClient) { }\n\n  get currentUser(): User | undefined {\n    if (!this.user) return undefined;\n    // No es recomendable retornar el this.user ya que fuera del servicio se puede acceder o modificar el usuario\n    // Es recomendable enviar una copia del objeto, ya sea con {...this.user} o con structuredClone, función nueva de la última versión de Angular\n    // structuredClone hace una deep clone (profunda clonación)\n    // return this.user;\n    return structuredClone(this.user);\n  }\n\n  login(email: string, password: string): Observable<User> {\n\n    // Paso 1 que se hará en un futuro con el backend implementado\n    // this.http.post('login', { email, password });\n\n    return this.http.get<User>(`${this.baseUrl}/users/1`)\n      .pipe(\n        tap(user => this.user = user),\n        tap(user => localStorage.setItem('token', 'AS1wyxzvc897asdf9xv.oi8as897fgd89suds.fdgfds6h5gfd6')\n        )\n      )\n  }\n\n  // El observable va a emitir un valor booleano\n  checkAuthentication(): Observable<boolean> | boolean {\n    if (!localStorage.getItem('token')) return false;\n\n    const token = localStorage.getItem('token');\n\n    return this.http.get<User>(`${this.baseUrl}/users/1`)\n      .pipe(\n        tap(user => this.user = user),\n        map(user => !!user)\n      )\n\n    return of(true);\n\n  }\n\n  logout() {\n    this.user = undefined;\n    localStorage.clear();\n  }\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAE1D,SAAqBC,GAAG,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAO/C,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAWP,WAAW,CAACO,OAAO;EAGL;EAExC,IAAIC,WAAWA,CAAA;IACb,IAAI,CAAC,IAAI,CAACC,IAAI,EAAE,OAAOC,SAAS;IAChC;IACA;IACA;IACA;IACA,OAAOC,eAAe,CAAC,IAAI,CAACF,IAAI,CAAC;EACnC;EAEAG,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IAEnC;IACA;IAEA,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,OAAO,UAAU,CAAC,CAClDS,IAAI,CACHf,GAAG,CAACQ,IAAI,IAAI,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAC,EAC7BR,GAAG,CAACQ,IAAI,IAAIQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,qDAAqD,CAAC,CAC/F,CACF;EACL;EAEA;EACAC,mBAAmBA,CAAA;IACjB,IAAI,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,KAAK;IAEhD,MAAMC,KAAK,GAAGJ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAO,IAAI,CAACd,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,OAAO,UAAU,CAAC,CAClDS,IAAI,CACHf,GAAG,CAACQ,IAAI,IAAI,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAC,EAC7BN,GAAG,CAACM,IAAI,IAAI,CAAC,CAACA,IAAI,CAAC,CACpB;IAEH,OAAOP,EAAE,CAAC,IAAI,CAAC;EAEjB;EAEAoB,MAAMA,CAAA;IACJ,IAAI,CAACb,IAAI,GAAGC,SAAS;IACrBO,YAAY,CAACM,KAAK,EAAE;EACtB;EAAC,QAAAC,CAAA,G;qBAhDUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}