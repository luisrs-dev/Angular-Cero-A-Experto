{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  checkAuthStatus() {\n    return this.authService.checkAuthentication().pipe(tap(isAuthenticated => {\n      if (!isAuthenticated) {\n        this.router.navigate(['./auth/login']);\n      }\n    }));\n  }\n  canMatch(route, segments) {\n    return this.checkAuthStatus();\n    // console.log('canMatch');\n    // console.log({ route, segments });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n\n  canActivate(route, state) {\n    return this.checkAuthStatus();\n    // console.log('canActivate');\n    // console.log({ route, state });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthGuard","constructor","authService","router","checkAuthStatus","checkAuthentication","pipe","isAuthenticated","navigate","canMatch","route","segments","canActivate","state","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\heroesApp\\src\\app\\auth\\guards\\auth.guards.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanMatch, CanActivate, UrlSegment, Route, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable, tap } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanMatch, CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  private checkAuthStatus(): boolean | Observable<boolean> {\n    return this.authService.checkAuthentication()\n      .pipe(\n        tap(isAuthenticated => {\n          if (!isAuthenticated) {\n            this.router.navigate(['./auth/login'])\n          }\n        })\n      )\n  }\n\n  canMatch(route: Route, segments: UrlSegment[]): boolean | Observable<boolean> {\n\n    return this.checkAuthStatus();\n    // console.log('canMatch');\n    // console.log({ route, segments });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Observable<boolean> {\n    return this.checkAuthStatus();\n    // console.log('canActivate');\n    // console.log({ route, state });\n    // return true;\n\n    // throw new Error('Method not implemented')\n  }\n\n\n\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAItC,OAAM,MAAOC,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEIC,eAAeA,CAAA;IACrB,OAAO,IAAI,CAACF,WAAW,CAACG,mBAAmB,EAAE,CAC1CC,IAAI,CACHP,GAAG,CAACQ,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;;IAE1C,CAAC,CAAC,CACH;EACL;EAEAC,QAAQA,CAACC,KAAY,EAAEC,QAAsB;IAE3C,OAAO,IAAI,CAACP,eAAe,EAAE;IAC7B;IACA;IACA;IACA;EACF;;EAEAQ,WAAWA,CAACF,KAA6B,EAAEG,KAA0B;IACnE,OAAO,IAAI,CAACT,eAAe,EAAE;IAC7B;IACA;IACA;IAEA;EACF;EAAC,QAAAU,CAAA,G;qBAjCUd,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATrB,SAAS;IAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;IAAAC,UAAA,EADI;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}