{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthGuard {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  checkAuthStatus() {\n    return this.authService.checkAuthentication();\n  }\n  canMatch(route, segments) {\n    // console.log('canMatch');\n    // console.log({ route, segments });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n  canActivate(route, state) {\n    // console.log('canActivate');\n    // console.log({ route, state });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","checkAuthStatus","checkAuthentication","canMatch","route","segments","canActivate","state","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luisr\\Documents\\Develop\\Curso Angular - Fernando Herrera 2023\\Angular\\heroesApp\\src\\app\\auth\\guards\\auth.guards.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanMatch, CanActivate, UrlSegment, Route, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanMatch, CanActivate {\n  constructor(private authService: AuthService) { }\n\n  private checkAuthStatus(): boolean | Observable<boolean> {\n    return this.authService.checkAuthentication();\n  }\n\n  canMatch(route: Route, segments: UrlSegment[]): boolean | Observable<boolean> {\n    // console.log('canMatch');\n    // console.log({ route, segments });\n    // return true;\n    // throw new Error('Method not implemented')\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Observable<boolean> {\n    // console.log('canActivate');\n    // console.log({ route, state });\n    // return true;\n\n    // throw new Error('Method not implemented')\n  }\n\n\n\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAiB;EAExCC,eAAeA,CAAA;IACrB,OAAO,IAAI,CAACD,WAAW,CAACE,mBAAmB,EAAE;EAC/C;EAEAC,QAAQA,CAACC,KAAY,EAAEC,QAAsB;IAC3C;IACA;IACA;IACA;EAAA;EAGFC,WAAWA,CAACF,KAA6B,EAAEG,KAA0B;IACnE;IACA;IACA;IAEA;EAAA;EACD,QAAAC,CAAA,G;qBApBUV,SAAS,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATf,SAAS;IAAAgB,OAAA,EAAThB,SAAS,CAAAiB,IAAA;IAAAC,UAAA,EADI;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}